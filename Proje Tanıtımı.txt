Ödevin Amacı
Çalışanların performans ölçümü ve zam almasına, çalışmayanların uygun statüye önerilmesine dayalı 
bir proje geliştirilecektir. Projede insan, çalışan, işsiz, mavi yaka, beyaz yaka sınıfları oluşturulacaktır. 
Sınıflar arasında kalıtım olmasına dikkat edilmelidir.
• Çalışan ve İşsiz sınıfları İnsan sınıfından kalıtım yoluyla üretilmelidir.
• Mavi yaka, beyaz yaka sınıfları Çalışan sınıfından kalıtım yoluyla üretilmelidir.
Ödev için Gereksinimler
• Proje içinde main.py ve classlar’ın py dosyaları olmalıdır.
• İnsan sınıfında (Insan.py); tc_no, ad, soyad, yaş, cinsiyet, uyruk bilgileri private değişkenleri olarak 
bulunmalıdır.
• Değişkenlere göre Initializer metot olmalıdır.
• Tüm değişkenler için get/set metotları tanımlanmalıdır.
• __str__ metotu ile kullanıcı bilgileri yazdırılmalıdır.
• İşsiz sınıfı için (Issiz.py) statüsü (“mavi yaka, beyaz yaka, yönetici”) olan ve bu statülere ait geçmiş 
tecrübelerinin (yıl değeri) tutulduğu bir dictionary private değişkeni bulunmalıdır.
• Değişkene göre Initializer metot olmalıdır.
• Tüm gerekli değişkenler için get/set metotları tanımlanmalıdır.
• En uygun statünün bulunması için statu_bul metodu yazınız (Dictionaryde girilen değerlere 
göre; yıl değerinde mavi yakanın etkisi %20, beyaz yakanın etkisi %35, yöneticinin etkisi %45 
olarak hesaplayınız ve en yüksek çıkan değere ait statüyü ilgili değişkeninize atayınız. Bu 
değişkene farklı bir class’tan erişim sağlanabilmelidir.)
• İlgili yerlerde try/except kullanılmalıdır.
• __str__ metotu içinde kullanıcının ad, soyadı ve dictionary ile hesaplanan kişiye en uygun statü
(public değişken ile yazdırılmamalı) yazdırılmalıdır.
• Çalışan sınıfı için (Calisan.py) sektör (kullanıcının “teknoloji, muhasebe, inşaat, diğer” seçenekleri 
girmesi sağlanmalı ve doğru girdiği kontrol edilmelidir), tecrübe (ay değeri) ve maaş değişkenleri
private olarak tanımlanmalıdır.
• Değişkenlere göre Initializer metot olmalıdır.
• Tüm gerekli değişkenler için get/set metotları tanımlanmalıdır.
• Çalışanın zam hakkını hesaplayan zam_hakki metodu yazılacaktır (2 sene öncesi tecrübesi 
olanın zam oranı önerisi 0’dır. 2-4 sene arası çalışan ise ve maaş 15000TL altıysa 
“maaş%tecrübe” sonucu zam oranı önerilecektir. 4 seneden fazla tecrübe varsa ve maaş 25000 
altıysa “(maaş%tecrübe)/2” zam oranı önerilecektir). Yeni maaş, eski maaş ile aynıysa eski 
maaş, yeni maaşa atanmalıdır.
• İlgili yerlerde try/except kullanılmalıdır.
• __str__ metotunda ad, soyad, tecrübe ve yeni maaşı (public değişken ile yazdırılmamalı)
yazılmalıdır.
• Mavi yaka sınıfı için (MaviYaka.py) yıpranma payı (float: 0.2, 0.5 gibi değer almalıdır) değişkeni
private olarak bulunmalıdır. 
• Değişkenlere göre Initializer metot olmalıdır.
• Tüm gerekli değişkenler için get/set metotları tanımlanmalıdır.
• Çalışanın zam hakkını hesaplayan zam_hakki metodu yazılacaktır (2 sene öncesi tecrübesi 
olanın zam oranı önerisi “yıpranma_payi*10” olacaktır. 2-4 sene arası çalışan ise ve maaş 
15000TL altıysa “(maaş%tecrübe)/2 + (yıpranma_payi*10)” sonucu zam oranı önerilecektir. 4 
seneden fazla tecrübe varsa ve maaş 25000 altıysa “(maaş%tecrübe)/3+ (yıpranma_payi*10)” 
zam oranı önerilecektir). Yeni maaş, eski maaş ile aynıysa eski maaş, yeni maaşa atanmalıdır.
• İlgili yerlerde try/except kullanılmalıdır.
• __str__ metotunda ad, soyad, tecrübe ve yeni maaşı (public değişken ile yazdırılmamalı) 
yazılmalıdır.
• Beyaz yaka sınıfı için (BeyazYaka.py) teşvik primi (500, 2500 gibi değer almalıdır) değişkeni 
private olarak bulunmalıdır. 
• Değişkenlere göre Initializer metot olmalıdır.
• Tüm gerekli değişkenler için get/set metotları tanımlanmalıdır.
• Çalışanın zam hakkını hesaplayan zam_hakki metodu yazılacaktır (2 sene öncesi tecrübesi 
olanın zam önerisi “teşvik_primi” olacaktır. 2-4 sene arası çalışan ise ve maaş 15000TL altıysa 
“(maaş%tecrübe)*5 + teşvik_primi” sonucu, zam olarak önerilecektir (önceki sınıflar gibi oran 
değil, bu sınıf zam miktarı). 4 seneden fazla tecrübe varsa ve maaş 25000 altıysa 
“(maaş%tecrübe)*4 + teşvik_primi” zam olarak önerilecektir). Yeni maaş, eski maaş ile 
aynıysa eski maaş, yeni maaşa atanmalıdır.
• İlgili yerlerde try/except kullanılmalıdır.
• __str__ metotunda ad, soyad, tecrübe ve yeni maaşı (public değişken ile yazdırılmamalı) 
yazılmalıdır.
• Main.py için;
• İlgili yerlerde try/except kullanılmalıdır.
• Sadece insan sınıfı için 2 nesne üretilmelidir ve bilgiler __str__ metotu aracılığıyla 
yazdırılmalıdır.
• İşsiz sınıfı için 3 nesne üretilmelidir ve __str__ metotu ile ilgili bilgiler ekrana yazdırılmalıdır.
• Çalışan sınıfı için 3 nesne üretilmelidir ve __str__ metotu ile ilgili bilgiler ekrana 
yazdırılmalıdır.
• Mavi yaka sınıfı için 3 nesne üretilmelidir ve __str__ metotu ile ilgili bilgiler ekrana 
yazdırılmalıdır.
• Beyaz yaka sınıfı için 3 nesne üretilmelidir ve __str__ metotu ile ilgili bilgiler ekrana 
yazdırılmalıdır.
• Çalışan, mavi yaka ve beyaz yaka nesnelerinin tüm değerlerinden (“çalışan, mavi yaka, beyaz 
yaka” nesne değeri ,tc_no, ad, soyad, yas, cinsiyet, uyruk, sektör, tecrübe (kaydederken yıla 
çeviriniz), maaş, yıpranma payı, teşvik primi, yeni maaş) bir pandas DataFrame oluşturunuz 
(excel, csv veya dictionary ile). Oluşturduğunuz DataFrame ile şu işlemleri gerçekleştiriniz:
a) Bazı değişken değerleri diğer nesneler için boş olabilir, DataFrame için bu değerleri 0 
atayınız.
b) Çalışan, mavi yaka ve beyaz yaka için gruplandırarak tecrübe ve yeni maaş 
ortalamalarını her grup için hesaplayınız ve yazdırınız.
c) Maaşı 15000TL üzerinde olanların toplam sayısını bulunuz.
d) Yeni maaşa göre DataFrame’i küçükten büyüğe sıralayınız ve yazdırınız.
e) Tecrübesi 3 seneden fazla olan Beyaz yakalıları bulunuz ve yazdırınız.
f) Yeni maaşı 10000 TL üzerinde olanlar için; 2-5 satır arası olanları, tc_no ve yeni_maaş 
sütunlarını seçerek gösteriniz ve yazdırınız.
g) Var olan DataFrame’den ad, soyad, sektör ve yeni maaşı içeren yeni bir DataFrame 
elde ediniz ve yazdırınız.